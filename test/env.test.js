// Generated by CoffeeScript 2.5.1
// env.test.coffee
var dir, root_dir, simple, test_dir;

import {
  strict as assert
} from 'assert';

import {
  resolve
} from 'path';

import {
  say,
  undef,
  pass
} from '@jdeighan/coffee-utils';

import {
  debug,
  setDebugging
} from '@jdeighan/coffee-utils/debug';

import {
  log
} from '@jdeighan/coffee-utils/log';

import {
  mydir,
  pathTo,
  slurp,
  mkpath
} from '@jdeighan/coffee-utils/fs';

import {
  UnitTester
} from '@jdeighan/coffee-utils/test';

import {
  taml
} from '@jdeighan/string-input/taml';

import {
  EnvLoader,
  loadEnvFrom,
  loadEnvFile,
  loadEnvString
} from '@jdeighan/env';

dir = mydir(import.meta.url); // directory this file is in

root_dir = resolve(dir, '..');

test_dir = mkpath(dir, 'test');

simple = new UnitTester();

/*   Contents of relevant .env files:

Root .env   (in root_dir)

	if development
		color = magenta
		mood = somber
	if not development
		color = azure
		mood = happy

test .env    (in dir)

	if mood == 'somber'
		bgColor = sadness
		show = yes
	if mood == 'happy'
		bgColor = purple
		show = no

test/test .env    (in test_dir)

	show = maybe

*/
// ---------------------------------------------------------------------------
// --- test loading from root_dir
(function() {
  process.env.development = 'yes';
  loadEnvFrom(root_dir);
  simple.equal(54, process.env.development, 'yes');
  simple.equal(55, process.env.color, 'magenta');
  simple.equal(56, process.env.mood, 'somber');
  return simple.equal(57, process.env.bgColor, undef);
})();

(function() {
  delete process.env.development;
  loadEnvFrom(root_dir);
  simple.equal(64, process.env.development, undef);
  simple.equal(65, process.env.color, 'azure');
  simple.equal(66, process.env.mood, 'happy');
  return simple.equal(67, process.env.bgColor, undef);
})();

// ---------------------------------------------------------------------------
// --- test loading from dir
(function() {
  process.env.development = 'yes';
  loadEnvFrom(dir);
  simple.equal(77, process.env.development, 'yes');
  simple.equal(78, process.env.color, 'magenta');
  simple.equal(79, process.env.mood, 'somber');
  return simple.equal(80, process.env.bgColor, 'sadness');
})();

(function() {
  delete process.env.development;
  loadEnvFrom(dir);
  simple.equal(87, process.env.development, undef);
  simple.equal(88, process.env.color, 'azure');
  simple.equal(89, process.env.mood, 'happy');
  return simple.equal(90, process.env.bgColor, 'purple');
})();

// ---------------------------------------------------------------------------
// --- test loading from test_dir
(function() {
  process.env.development = 'yes';
  loadEnvFrom(test_dir);
  return simple.equal(100, process.env.show, 'maybe');
})();

(function() {
  delete process.env.development;
  loadEnvFrom(test_dir);
  return simple.equal(107, process.env.show, 'maybe');
})();

// ---------------------------------------------------------------------------
// --- test prefix
(function() {
  delete process.env['dir_root'];
  delete process.env['sb.indent'];
  delete process.env['dir_data'];
  delete process.env['sb.dev'];
  loadEnvString(`dir_root = /usr/project
sb.indent = 3
dir_data = /usr/project/data
sb.dev = yes`, {
    prefix: 'sb.' // load only keys with prefix 'sb.'
  });
  simple.equal(128, process.env['dir_root'], undef);
  simple.equal(129, process.env['sb.indent'], '3');
  simple.equal(130, process.env['dir_data'], undef);
  return simple.equal(131, process.env['sb.dev'], 'yes');
})();

// ---------------------------------------------------------------------------
// --- test prefix with stripPrefix option
(function() {
  var env;
  delete process.env['dir_root'];
  delete process.env['sb.indent'];
  delete process.env['indent'];
  delete process.env['dir_data'];
  delete process.env['sb.dev'];
  delete process.env['dev'];
  env = loadEnvString(`dir_root = /usr/project
sb.indent = 3
dir_data = /usr/project/data
sb.dev = yes`, {
    prefix: 'sb.',
    stripPrefix: true
  });
  simple.equal(156, env.getVar('dir_root'), undef);
  simple.equal(157, env.getVar('sb.indent'), undef);
  simple.equal(158, env.getVar('indent'), '3');
  simple.equal(160, env.getVar('dir_data'), undef);
  simple.equal(161, env.getVar('sb.dev'), undef);
  return simple.equal(162, env.getVar('dev'), 'yes');
})();

// ---------------------------------------------------------------------------
// --- test hCallbacks
(function() {
  var hCallbacks, hVariables;
  hVariables = {};
  hCallbacks = {
    getVar: function(name) {
      return hVariables[name];
    },
    setVar: function(name, value) {
      return hVariables[name] = value;
    },
    clearVar: function(name) {
      return delete hVariables[name];
    },
    clearAll: function() {
      return hVariables = {};
    },
    names: function() {
      return Object.keys(hVariables);
    }
  };
  loadEnvString(`dev = yes
dir_root = /usr/project
dir_data = $dir_root/data`, {hCallbacks});
  return simple.equal(194, hVariables, {
    dev: 'yes',
    dir_root: '/usr/project',
    dir_data: '/usr/project/data'
  });
})();
